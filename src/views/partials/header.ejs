<div id="header-wrap">

    <div class="top-content">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-6">
                    <div class="social-links">
                        <ul>
                            <li>
                                <a href="#"><i class="icon icon-facebook"></i></a>
                            </li>
                            <li>
                                <a href="#"><i class="icon icon-twitter"></i></a>
                            </li>
                            <li>
                                <a href="#"><i class="icon icon-youtube-play"></i></a>
                            </li>
                            <li>
                                <a href="#"><i class="icon icon-behance-square"></i></a>
                            </li>
                        </ul>
                    </div><!--social-links-->
                </div>
                <div class="col-md-6">
                    <div class="right-element">
                        <a href="#" class="user-account for-buy"><i class="icon icon-user"></i><span>
                                <%= isLoggedIn && typeof NameOfUser !=='undefined' ? NameOfUser : 'Account' %>
                            </span></a>
                        <a href="#" class="cart for-buy"><i class="icon icon-clipboard"></i><span>Cart:(0$)</span></a>

                        <div class="action-menu">

                            <div class="search-bar">
                                <a href="#" class="search-button search-toggle" data-selector="#header-wrap">
                                    <i class="icon icon-search"></i>
                                </a>
                                <form role="search" method="get" class="search-box">
                                    <input class="search-field text search-input" placeholder="Search" type="search">
                                </form>
                            </div>
                        </div>

                    </div><!--top-right-->
                </div>

            </div>
        </div>
    </div><!--top-content-->

    <header id="header">
        <div class="container-fluid">
            <div class="row">

                <div class="col-md-2">
                    <div class="main-logo">
                        <a href="index.html"><img src="images/main-logo.png" alt="logo"></a>
                    </div>

                </div>

                <div class="col-md-10">

                    <nav id="navbar">
                        <div class="main-menu stellarnav">
                            <ul class="menu-list">
                                <li class="menu-item active"><a href="/homepage">Home</a></li>
                                <li class="menu-item has-sub">
                                    <a href="#pages" class="nav-link">Pages</a>

                                    <ul>
                                        <li class="active"><a href="/homepage">Home</a></li>
                                        <li><a href="index.html">About</a></li>
                                        <li><a href="index.html">Styles</a></li>
                                        <li><a href="index.html">Blog</a></li>
                                        <li><a href="index.html">Post Single</a></li>
                                        <li><a href="index.html">Our Store</a></li>
                                        <li><a href="index.html">Product Single</a></li>
                                        <li><a href="index.html">Contact</a></li>
                                        <li><a href="index.html">Thank You</a></li>
                                    </ul>

                                </li>
                                <li class="menu-item"><a href="#featured-books" class="nav-link">Featured</a></li>
                                <li class="menu-item"><a href="#popular-books" class="nav-link">Popular</a></li>
                                <li class="menu-item"><a href="#special-offer" class="nav-link">Offer</a></li>
                                <li class="menu-item"><a href="#latest-blog" class="nav-link">Articles</a></li>
                                <li class="menu-item"><a href="#download-app" class="nav-link">Download App</a></li>
                            </ul>

                            <div class="hamburger">
                                <span class="bar"></span>
                                <span class="bar"></span>
                                <span class="bar"></span>
                            </div>

                        </div>
                    </nav>

                </div>

            </div>
        </div>
    </header>

</div><!--header-wrap-->
<div class="modal fade" id="loginModal" tabindex="-1" aria-labelledby="loginModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="loginModalLabel">Login to Your Account</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="loginForm" action="/login" method="POST">
                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <input type="email" class="form-control" id="email" name="email" required>
                    </div>
                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <input type="password" class="form-control" id="password" name="password" required>
                    </div>
                    <div class="mb-3 form-check">
                        <input type="checkbox" class="form-check-input" id="rememberMe" name="rememberMe">
                        <label class="form-check-label" for="rememberMe">Remember me</label>
                    </div>
                    <div class="mb-3 form-check">
                        <input type="checkbox" class="form-check-input" id="adminLogin" name="adminLogin">
                        <label class="form-check-label" for="adminLogin">Login as Admin</label>
                    </div>
                    <button type="submit" class="btn btn-primary w-100">Login</button>
                </form>
                <div class="text-center mt-3">
                    <a href="/forgot-password">Forgot password?</a>
                    <p class="mt-2">Don't have an account? <a href="/register">Register</a></p>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- After the login modal -->
<div class="modal fade" id="cartModal" tabindex="-1" aria-labelledby="cartModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cartModalLabel">Your Shopping Cart</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="cart-items-container">
                    <!-- Cart items will be loaded here dynamically -->
                    <div class="text-center">Loading your cart...</div>
                </div>
            </div>
            <div class="modal-footer justify-content-between">
                <div class="cart-total">Total: $<span id="cart-modal-total">0.00</span></div>
                <div>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="update-cart-button">Update Cart</button>
                    <button type="button" class="btn btn-accent" id="checkout-button">Checkout</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    window.updateCartTotal = function () {
        // Only proceed if user is logged in
        const isLoggedIn = <%= (typeof isLoggedIn !== 'undefined' && isLoggedIn) ? 'true' : 'false' %>;
        if (!isLoggedIn) return;

        // Fetch updated cart info
        fetch('/cart-info')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to fetch cart data');
                }
                return response.json();
            })
            .then(cartItems => {
                // Calculate total cost
                let totalCost = 0;
                cartItems.forEach(item => {
                    totalCost += item.quantity * item.price;
                });

                // Update cart display in header
                const cartElement = document.querySelector('.cart.for-buy span');
                cartElement.textContent = `Cart:(${totalCost.toFixed(2)}$)`;
            })
            .catch(error => {
                console.error('Error updating cart display:', error);
            });
    };
    window.showNotification = function (message, type = 'success') {
						// Create notification element if it doesn't exist
						let notification = document.querySelector('.cart-notification');
						if (!notification) {
							notification = document.createElement('div');
							notification.className = 'cart-notification';
							document.querySelector('#header').appendChild(notification);
						}

						// Set message and type
						notification.textContent = message;
						notification.className = `cart-notification ${type}`;

						// Show notification
						notification.classList.add('show');

						// Hide after 3 seconds
						setTimeout(() => {
							notification.classList.remove('show');
                            notification.remove();
						}, 2000);
					}


    document.addEventListener('DOMContentLoaded', function () {
        updateCartTotal();
        const accountLink = document.querySelector('.user-account');
        const loginForm = document.getElementById('loginForm');

        // Account link handler
        accountLink.addEventListener('click', function (e) {
            e.preventDefault();

            const isLoggedIn = <%= (typeof isLoggedIn !== 'undefined' && isLoggedIn) ? 'true' : 'false' %>;

            if (!isLoggedIn) {
                const loginModal = new bootstrap.Modal(document.getElementById('loginModal'));
                loginModal.show();
            } else {
                window.location.href = '/profile'; 
            }
        });

        // Login form submission handler
        loginForm.addEventListener('submit', function (e) {
            e.preventDefault();

            const formData = new FormData(loginForm);
            const isAdminLogin = formData.get('adminLogin') === 'on';
            const loginEndpoint = isAdminLogin ? '/admin/login' : '/login';

            fetch(loginEndpoint, {
                method: 'POST',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: new URLSearchParams(formData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    if (isAdminLogin) {
                        // For admin login, redirect to admin dashboard
                        window.location.href = data.redirectUrl || '/admin-dashboard';
                    } else {
                        // For regular user login, reload the page
                        window.location.reload();
                    }
                } else {
                    // Show error messages
                    const errorDiv = document.getElementById('loginErrors') ||
                        document.createElement('div');
                    errorDiv.id = 'loginErrors';
                    errorDiv.className = 'alert alert-danger';
                    errorDiv.innerHTML = data.errors ?
                        data.errors.map(err => err.msg).join('<br>') :
                        data.error || 'Login failed';

                    const modalBody = document.querySelector('#loginModal .modal-body');
                    if (!document.getElementById('loginErrors')) {
                        modalBody.insertBefore(errorDiv, modalBody.firstChild);
                    }
                }
            })
            .catch(error => {
                console.error('Login error:', error);
            });
        });



        // Add cart click handler
        const cartElement = document.querySelector('.cart.for-buy');
        if (cartElement) {
            cartElement.addEventListener('click', function (e) {
                e.preventDefault();

                // Check if user is logged in
                const isLoggedIn = <%= (typeof isLoggedIn !== 'undefined' && isLoggedIn) ? 'true' : 'false' %>;
                if (!isLoggedIn) {
                    alert('Please log in to view your cart');
                    return;
                }

                // Load cart items and show modal
                loadCartItems();
                const cartModal = new bootstrap.Modal(document.getElementById('cartModal'));
                cartModal.show();
            });
        }

        // Function to load cart items into the modal
        function loadCartItems() {
            const cartContainer = document.getElementById('cart-items-container');
            cartContainer.innerHTML = '<div class="text-center">Loading your cart...</div>';

            fetch('/cart-info')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to fetch cart data');
                    }
                    return response.json();
                })
                .then(cartItems => {
                    // Calculate total
                    let totalCost = 0;

                    if (cartItems.length === 0) {
                        cartContainer.innerHTML = '<div class="text-center">Your cart is empty</div>';
                        document.getElementById('cart-modal-total').textContent = '0.00';
                        document.getElementById('update-cart-button').disabled = true;
                        document.getElementById('checkout-button').disabled = true;
                        return;
                    }

                    // Generate HTML for cart items
                    let cartHtml = '<div class="cart-items-list">';

                    cartItems.forEach(item => {
                        const itemTotal = item.quantity * item.price;
                        totalCost += itemTotal;

                        cartHtml += `
                        <div class="cart-item" data-item-id="${item.item_id}">
                            <div class="row align-items-center mb-3 p-2 border-bottom">
                                <div class="col-md-2">
                                    <img src="images/${item.image_path || 'tab-item1.jpg'}" alt="${item.title}" class="img-fluid">
                                </div>
                                <div class="col-md-5">
                                    <h5>${item.title}</h5>
                                </div>
                                <div class="col-md-2">
                                    <div class="input-group">
                                        <input type="number" class="form-control form-control-sm text-center item-quantity" value="${item.quantity}" min="1" max="10">
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="item-price">$${item.price} x ${item.quantity}</div>
                                    <div class="item-total">$${itemTotal.toFixed(2)}</div>
                                </div>
                                <div class="col-md-1">
                                    <button class="btn btn-sm btn-danger remove-item"><p>Remove</p></button>
                                </div>
                            </div>
                        </div>`;
                    });

                    cartHtml += '</div>';
                    cartContainer.innerHTML = cartHtml;
                    document.getElementById('cart-modal-total').textContent = totalCost.toFixed(2);

                    // Add event listeners for quantity buttons
                    setupQuantityButtons();
                })
                .catch(error => {
                    console.error('Error loading cart items:', error);
                    cartContainer.innerHTML = '<div class="text-center text-danger">Error loading cart items</div>';
                });
        }

        // Function to setup quantity adjustment buttons
        function setupQuantityButtons() {

            // Direct input change
            document.querySelectorAll('.item-quantity').forEach(input => {
                input.addEventListener('change', function () {
                    if (parseInt(this.value) < 1) this.value = 1;
                    if (parseInt(this.value) > 10) this.value = 10;
                    updateItemPrice(this);
                });
            });

            // Remove item
            document.querySelectorAll('.remove-item').forEach(button => {
                button.addEventListener('click', function () {
                    const cartItem = this.closest('.cart-item');
                    const itemId = cartItem.dataset.itemId;

                    if (confirm('Are you sure you want to remove this item from your cart?')) {
                        fetch('/remove-from-cart', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ item_id: parseInt(itemId) })
                        })
                            .then(response => response.json())
                            .then(data => {
                                cartItem.remove();
                                updateCartTotal();
                                updateCartModalTotal();

                                // Check if cart is now empty
                                if (document.querySelectorAll('.cart-item').length === 0) {
                                    document.getElementById('cart-items-container').innerHTML =
                                        '<div class="text-center">Your cart is empty</div>';
                                    document.getElementById('update-cart-button').disabled = true;
                                    document.getElementById('checkout-button').disabled = true;
                                }
                            })
                            .catch(err => {
                                console.error('Error removing item:', err);
                            });
                    }
                });
            });
        }

        // Function to update price display when quantity changes
        function updateItemPrice(element) {
            const cartItem = element.closest('.cart-item');
            const quantityInput = cartItem.querySelector('.item-quantity');
            const quantity = parseInt(quantityInput.value);

            const itemPriceElement = cartItem.querySelector('.item-price');
            const priceText = itemPriceElement.textContent;
            const price = parseFloat(priceText.split('$')[1].split(' x ')[0]);

            const itemTotal = price * quantity;
            cartItem.querySelector('.item-total').textContent = '$' + itemTotal.toFixed(2);

            updateCartModalTotal();
        }

        // Function to update total in the modal
        function updateCartModalTotal() {
            let total = 0;
            document.querySelectorAll('.cart-item').forEach(item => {
                const totalText = item.querySelector('.item-total').textContent;
                total += parseFloat(totalText.substring(1));
            });

            document.getElementById('cart-modal-total').textContent = total.toFixed(2);
        }

        // Update cart button
        document.getElementById('update-cart-button').addEventListener('click', function () {
            const updates = [];

            document.querySelectorAll('.cart-item').forEach(item => {
                const itemId = parseInt(item.dataset.itemId);
                const quantity = parseInt(item.querySelector('.item-quantity').value);

                updates.push({
                    item_id: itemId,
                    quantity: quantity
                });
            });

            fetch('/update-cart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ updates })
            })
                .then(response => response.json())
                .then(data => {
                    // Update cart icon total
                    updateCartTotal();
                    showNotification('Cart updated successfully!');

                    // Close modal
                    bootstrap.Modal.getInstance(document.getElementById('cartModal')).hide();
                })
                .catch(err => {
                    console.error('Error updating cart:', err);
                    showNotification('Failed to update cart. Please try again.', 'error');
                });
        });

        // Checkout button
        document.getElementById('checkout-button').addEventListener('click', function () {
            window.location.href = '/checkout';
        });
    });
</script>